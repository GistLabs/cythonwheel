name: Python package

on: [ push, pull_request ]

permissions: write-all

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.10', 3.11]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.*') }}
          restore-keys: |
            ${{ runner.os }}-pip-  

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Test with pytest
        run: |
          poetry run pytest


  publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.*') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools poetry wheel twine
      - name: Set build version from git including rev count
        run: |
          poetry version `poetry version -s`.`git rev-list --count HEAD`
      - name: Build
        run: |
          poetry build
          zip -qq -r dir.zip dist
      - name: Build Binary Wheel
        run: |
          python setup.py bdist_wheel

      #    - name: Publish
      #      env:
      #        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      #      run: |
      #        poetry config pypi-token.pypi $PYPI_TOKEN
      #        poetry publish

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl

      - name: Create tag
        id: create_tag
        run: |
          git tag v`poetry version -s`
          git push origin v`poetry version -s`
          version_tag=$(poetry version -s)
          echo "::set-output name=version_tag::$version_tag"

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --abbrev=0 --tags)
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_latest_tag.outputs.latest_tag }}
          release_name: "Release ${{ steps.get_latest_tag.outputs.latest_tag }}"
          body: 'Release from Github Action'
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above
          asset_path: "./dist/${{ github.event.repository.name }}-${{ steps.create_tag.outputs.version_tag }}-py3-none-any.whl"
          asset_name: "${{ github.event.repository.name }}-${{ steps.create_tag.outputs.version_tag }}-py3-none-any.whl"
          asset_content_type: application/whl
